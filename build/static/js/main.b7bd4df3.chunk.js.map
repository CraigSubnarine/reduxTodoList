{"version":3,"sources":["actions/index.js","components/ThemeChanger.js","components/Filter.js","containers/AddTodo.js","components/Todo.js","components/TodoList.js","containers/VisibleTodoList.js","App.js","serviceWorker.js","reducers/themeChanger.js","reducers/todos.js","reducers/visibilityFilter.js","reducers/index.js","index.js"],"names":["setTheme","theme","type","setVisibilityFilter","filter","ThemeChanger","dispatch","useDispatch","className","onClick","Filter","useSelector","state","visibilityFilter","connect","input","onSubmit","e","preventDefault","value","trim","text","uuid","id","addTodo","v4","ref","node","placeholder","Todo","onRemove","completed","style","textDecoration","checked","readOnly","TodoList","todos","toggleTodo","deleteTodo","map","todo","key","getVisibleTodos","t","App","VisibleTodoList","Boolean","window","location","hostname","match","savedTheme","cookie","load","undefined","themeChanger","action","save","path","todoList","newTodo","changeTodo","removeTodo","allReducers","combineReducers","store","createStore","allReducer","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b7bd4df3.chunk.js","sourcesContent":["//theme \r\nexport const setTheme = theme => ({\r\n  type: \"SET_THEME\",\r\n  theme\r\n});\r\n\r\n// todo app\r\nexport const addTodo = (text, uuid) => ({\r\n  type: \"ADD_TODO\",\r\n  id: uuid,\r\n  text\r\n});\r\n\r\nexport const setVisibilityFilter = filter => ({\r\n  type: \"SET_VISIBILITY_FILTER\",\r\n  filter\r\n});\r\n\r\nexport const toggleTodo = id => ({\r\n  type: \"TOGGLE_TODO\",\r\n  id\r\n});\r\n\r\nexport const deleteTodo = id => ({\r\n  type: \"DELETE_TODO\",\r\n  id\r\n});","import React from \"react\";\r\nimport {setTheme} from \"../actions\"\r\nimport {useDispatch} from 'react-redux'\r\n\r\n\r\nfunction ThemeChanger (){\r\n    const dispatch = useDispatch();\r\n    \r\n    return (\r\n        <div>\r\n            <button className=\"lightButton\" onClick={()=>dispatch(setTheme('light-theme'))}>Light</button>\r\n            <button className=\"darkButton\" onClick={()=>dispatch(setTheme('dark-theme'))}>Dark</button>\r\n            <button className=\"forestButton\" onClick={()=>dispatch(setTheme('green-theme'))}>Green</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ThemeChanger;\r\n","import React from \"react\";\r\nimport {setVisibilityFilter} from \"../actions\"\r\nimport {useDispatch, useSelector} from 'react-redux'\r\n\r\n\r\n\r\nfunction Filter (){\r\n    const dispatch = useDispatch();\r\n    const filter = useSelector(state => state.visibilityFilter)\r\n\r\n    \r\n    return (\r\n        <div className={filter}>\r\n            <button className=\"all\" onClick={()=>dispatch(setVisibilityFilter('SHOW_ALL'))}>All</button>\r\n            <button className=\"active\" onClick={()=>dispatch(setVisibilityFilter('SHOW_ACTIVE'))}>Active</button>\r\n            <button className=\"complete\" onClick={()=>dispatch(setVisibilityFilter('SHOW_COMPLETED'))}>Completed</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Filter;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { addTodo } from \"../actions\";\r\nimport uuid from 'uuid'\r\n\r\nconst AddTodo = ({ dispatch }) => {\r\n  let input;\r\n  return (\r\n    <div>\r\n      <br />\r\n      <form\r\n        onSubmit={e => {\r\n          e.preventDefault();\r\n          if (!input.value.trim()) {\r\n            return;\r\n          }\r\n          dispatch(addTodo(input.value, uuid.v4()));\r\n          input.value = \"\";\r\n        }}\r\n      >\r\n        <input ref={node => (input = node)} placeholder=\"e.g. Walk Dog\"/>\r\n        <button type=\"submit\" id=\"themeButton\">Add Todo</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect()(AddTodo);\r\n","import React from 'react'\r\n// import DeleteTodo from '../containers/DeleteTodo'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Todo = ({onClick, onRemove, completed, text }) => (\r\n  <li className=\"todoItem\">\r\n    <div\r\n      onClick={onClick}\r\n      style={{ textDecoration: completed ? 'line-through' : 'none'}}\r\n    >\r\n      <input id=\"todo-checkbox\" type=\"checkbox\" checked={completed} readOnly></input>\r\n      {text}\r\n    </div>\r\n    <button className=\"delete-button\" id=\"themeButton\" onClick={onRemove}>Delete</button>\r\n    <br/>\r\n  </li>\r\n)\r\n\r\nTodo.propTypes = {\r\n  onClick: PropTypes.func.isRequired,\r\n  completed: PropTypes.bool.isRequired,\r\n  text: PropTypes.string.isRequired,\r\n  onRemove: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Todo\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Todo from \"./Todo\";\r\n\r\nconst TodoList = ({ todos, toggleTodo, deleteTodo }) => (\r\n  <ul>\r\n    {todos.map((todo) => (\r\n      <Todo key={todo.id} {...todo} onClick={() => toggleTodo(todo.id)} onRemove={() => deleteTodo(todo.id)}/>\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nTodoList.propTypes = {\r\n  todos: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      completed: PropTypes.bool.isRequired,\r\n      text: PropTypes.string.isRequired\r\n    }).isRequired\r\n  ).isRequired,\r\n  toggleTodo: PropTypes.func.isRequired,\r\n  deleteTodo: PropTypes.func.isRequired\r\n};\r\n\r\nexport default TodoList;\r\n","import { connect } from 'react-redux'\r\nimport { toggleTodo, deleteTodo} from '../actions'\r\nimport TodoList from '../components/TodoList'\r\n\r\nconst getVisibleTodos = (todos, filter) => {\r\n  switch (filter) {\r\n    case \"SHOW_ALL\":\r\n      return todos\r\n    case \"SHOW_COMPLETED\":\r\n      return todos.filter(t => t.completed)\r\n    case \"SHOW_ACTIVE\":\r\n      return todos.filter(t => !t.completed)\r\n    default:\r\n      return todos\r\n      // throw new Error('Unknown filter: ' + filter)\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  todos: getVisibleTodos(state.todos, state.visibilityFilter)\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  toggleTodo: id => dispatch(toggleTodo(id)),\r\n  deleteTodo: id => dispatch(deleteTodo(id))\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(TodoList)\r\n","import React from 'react';\nimport './css/main.css';\n\n\nimport ThemeChanger from './components/ThemeChanger'\nimport Filter from './components/Filter'\nimport AddTodo from './containers/AddTodo'\nimport VisibleTodoList from './containers/VisibleTodoList'\nimport {useSelector} from 'react-redux'\n\n\nfunction App() {\n  const theme = useSelector(state => state.theme)\n\n  return (\n    <div className=\"App\">\n      <div className={theme}>\n        <div className=\"headerDiv\">\n          <ThemeChanger/>\n          <AddTodo/>\n          <br/>\n          <Filter/>\n        </div>\n        <VisibleTodoList/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import cookie from 'react-cookies'\r\n\r\nlet savedTheme = cookie.load('theme');\r\n\r\nif(savedTheme === undefined){\r\n  savedTheme = 'light-theme'\r\n}\r\n\r\nconst themeChanger = (state = savedTheme, action) => {\r\n  switch (action.type) {\r\n    case \"SET_THEME\":\r\n      cookie.save('theme', action.theme, {path:'/'})\r\n      return action.theme;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default themeChanger;","import cookie from 'react-cookies'\r\n\r\nlet todoList = cookie.load('Todos');\r\n\r\nif(todoList === undefined){\r\n  todoList = []\r\n}\r\n\r\nconst todos = (state = todoList, action) => {\r\n    switch (action.type) {\r\n      case 'ADD_TODO':\r\n        let newTodo =  [\r\n          ...state,\r\n          {\r\n            id: action.id,\r\n            text: action.text,\r\n            completed: false\r\n          }\r\n        ]\r\n        cookie.save('Todos', newTodo, {path:'/'})\r\n        return newTodo\r\n      case 'TOGGLE_TODO':\r\n        let changeTodo = state.map(todo => (todo.id === action.id) ? {...todo, completed: !todo.completed} : todo)\r\n        cookie.save('Todos', changeTodo, {path:'/'})\r\n        return changeTodo\r\n      case 'DELETE_TODO':\r\n        let removeTodo = state.filter(todo =>(action.id!==todo.id))\r\n        cookie.save('Todos', removeTodo, {path:'/'})\r\n        return removeTodo\r\n      default:\r\n        return state\r\n    }\r\n  }\r\n  \r\n  export default todos\r\n  ","const visibilityFilter = (state = 'SHOW_ALL', action) => {\r\n  switch (action.type) {\r\n    case 'SET_VISIBILITY_FILTER':\r\n      return action.filter\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default visibilityFilter\r\n","import { combineReducers } from \"redux\";\r\nimport theme from \"./themeChanger\";\r\nimport todos from \"./todos\";\r\nimport visibilityFilter from \"./visibilityFilter\";\r\n\r\nconst allReducers = combineReducers({\r\n  todos,\r\n  visibilityFilter,\r\n  theme\r\n});\r\n\r\n\r\nexport default allReducers","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore} from 'redux';\nimport {Provider} from 'react-redux'\n\nimport allReducer from './reducers'\n\nconst store = createStore(allReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\n\nReactDOM.render(\n    <Provider store = {store}>\n    <App />\n    </Provider>, \n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}